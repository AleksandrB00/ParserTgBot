from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.functions.messages import ImportChatInviteRequest, GetMessagesRequest, GetHistoryRequest
from telethon.tl.functions.users import GetUsersRequest
from telethon.tl.types import ChannelParticipantsSearch
from telethon import TelegramClient, events
from tqdm import tqdm

import logging
import random
import time
import glob
import os
from datetime import datetime, timedelta, timezone

from settings import config
from database import orm


logging.basicConfig(
    level=logging.INFO,
    filename = "botlog.log",
    format = "%(asctime)s - %(module)s - %(levelname)s - %(funcName)s: %(lineno)d - %(message)s",
    datefmt='%H:%M:%S',
    )

bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage() 
dp = Dispatcher(bot, storage=storage)

client = TelegramClient(config.SESSION_NAME, config.API_ID, config.API_HASH)
client.start()

'''–°–æ—Å—Ç–æ—è–Ω–∏—è'''

class ChatOpenLink(StatesGroup):
    waiting_link = State()

class ChatPrivateLink(StatesGroup):
    waiting_link = State()

class Mailing(StatesGroup):
    waiting_text = State()
    entity = State()

class AdminMailing(StatesGroup):
    waiting_text = State()
    entity = State()
    continue_mail = State()

class Support(StatesGroup):
    message = State()

class ListParsing(StatesGroup):
    waiting_links = State()

class ChatComments(StatesGroup):
    waiting_link = State()
    count_posts = State()

class ParsingActivity(StatesGroup):
    waiting_link = State()
    last_activity = State()

'''–ö–æ–º–∞–Ω–¥—ã'''

async def set_default_commands(dp):
    await dp.bot.set_my_commands(
        [
            types.BotCommand('start', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ]
    )

'''–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'''

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    text = f'–ü—Ä–∏–≤–µ—Ç *{message.from_user.first_name}*!\n–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"* –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º üëá'
    response = orm.add_user(message.from_user.id, message.from_user.username)
    inline_markup = await main_menu()
    username = message.from_user.username
    count = 0
    if response == 1:
        users = orm.get_admins()
        for user in users:
            try:
                if message.from_user.username == None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{message.from_user.first_name}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                elif message.from_user.username != None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                else:
                   await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML') 
                count += 1
                if count == 10:
                    time.sleep(5)
                    count = 0
            except Exception as error:
                logging.error(error, exc_info=True)
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    await set_default_commands(dp)

@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def get_main_menu(callback_query: types.CallbackQuery):
    text = f'–ü—Ä–∏–≤–µ—Ç *{callback_query.from_user.first_name}*!\n–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"* –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º üëá'
    inline_markup = await main_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')

'''–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é'''

@dp.callback_query_handler(lambda call: 'premium_menu' in call.data)
async def get_premium_menu(callback_query: types.CallbackQuery):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞'
    inline_markup = await premium_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')

@dp.callback_query_handler(lambda call: 'support' in call.data)
async def create_support_message(callback_query: types.CallbackQuery):
    text = '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –≤ *–û–î–ù–û–ú* —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –µ–≥–æ –º–Ω–µ, —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await Support.message.set()

@dp.callback_query_handler(lambda call: 'parsing_open_start' in call.data)
async def parsing_open_start(callback_query: types.CallbackQuery):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await ChatOpenLink.waiting_link.set()

'''–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é'''

@dp.callback_query_handler(lambda call: 'parsing_list_start' in call.data)
async def parsing_list_start(callback_query: types.CallbackQuery):
    if orm.check_premium(callback_query.from_user.id) == 1:
        text = '–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∞–∫ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö), —á–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å –≤ —Å—Ç–æ–ª–±–∏–∫ (SHIFT+Enter).\n–ù–∞–ø–∏—Ä–∏–º–µ—Ä:\n*t.m–µ/dur–æv*\n*@dur–æv*\n*t.m–µ/dur–æv*'
        await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
        await ListParsing.waiting_links.set()
    else:
        text = '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')

@dp.callback_query_handler(lambda call: 'parsing_private_start' in call.data)
async def parsing_private_start(callback_query: types.CallbackQuery):
    text = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é'
    inline_markup = await premium_parsing_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')

@dp.callback_query_handler(lambda call: 'private_all' in call.data)
async def parsing_all_start(callback_query: types.CallbackQuery):
    if orm.check_premium(callback_query.from_user.id) == 1:
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n*https://t.me/abc123* –ª–∏–±–æ *https://t.me/joinchat/abc123*'
        await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
        await ChatPrivateLink.waiting_link.set()
    else:
        text = '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')

@dp.callback_query_handler(lambda call: 'parsing_comments' in call.data)
async def parsing_comments_start(callback_query: types.CallbackQuery):
    if orm.check_premium(callback_query.from_user.id) == 1:
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª *–≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏* –∏ —è –≤—ã–¥–∞–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∏—Å–∞–≤—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
        await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
        await ChatComments.waiting_link.set()
    else:
        text = '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')

@dp.callback_query_handler(lambda call: 'parsing_activity' in call.data)
async def parsing_activity_start(callback_query: types.CallbackQuery):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await ParsingActivity.waiting_link.set()

@dp.message_handler(state=ParsingActivity.waiting_link)
async def get_private_report(message: types.Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    inline_markup = await activity_menu()
    text = '–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ–Ω–ª–∞–π–Ω?'
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    await ParsingActivity.last_activity.set()

'''–ê–¥–º–∏–Ω–∫–∞ –∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π'''

@dp.message_handler(lambda message: orm.check_admin(message.from_user.id) == 1 and message.text == '/admin')
async def get_admin_menu(message: types.Message):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    inline_markup = await admin_menu()
    await message.answer(text, reply_markup=inline_markup)

@dp.callback_query_handler(lambda call: 'stat' in call.data)
async def get_stat(callback_query: types.CallbackQuery):
    stat = orm.get_stat()
    text = f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stat[0]}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {stat[1]}\n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–∏–≤—à–∏—Ö —á–∞—Ç —Å –±–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏*'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')

@dp.callback_query_handler(lambda call: 'create_admin_mailing' in call.data)
async def start_admin_mailing(callback_query: types.CallbackQuery):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å'
    await bot.send_message(callback_query.from_user.id, text)
    await AdminMailing.waiting_text.set()

@dp.message_handler(state=AdminMailing.waiting_text)
async def get_text(message: types.Message, state: FSMContext):
    await state.update_data(waiting_text=message.text, entity=message.entities)
    state_data = await state.get_data()
    text = state_data.get('waiting_text')
    entity = state_data.get('entity')
    users = orm.get_admins()
    answer = '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É'
    await message.answer(answer, parse_mode='Markdown')
    count = 0
    count_of_users = len(users)
    count_of_banned = 0
    for user in users:
        try:
            await bot.send_message(user.tg_id, text=text, entities=entity, disable_web_page_preview=True)
            count += 1
            if count == 10:
                    time.sleep(5)
                    count = 0
        except Exception as error:
            logging.error(error, exc_info=True)
            count_of_banned += 1
    answer1 = f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {count_of_users}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {count_of_users-count_of_banned}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {count_of_banned}'
    await message.answer(answer1, parse_mode='Markdown')
    answer2 = '–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º?'
    await message.answer(answer2, parse_mode='Markdown')
    await AdminMailing.continue_mail.set()

@dp.message_handler(state=AdminMailing.continue_mail)
async def mailing_all_users(message: types.Message, state: FSMContext):
    await state.update_data(continue_mail=message.text)
    state_data = await state.get_data()
    answer = state_data.get('continue_mail')
    text = state_data.get('waiting_text')
    entity = state_data.get('entity')
    if answer.upper() == '–î–ê':
        users = orm.get_all_users()
        answer1 = '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É'
        await message.answer(answer1, parse_mode='Markdown')
        count = 0
        count_of_users = len(users)
        count_of_banned = 0
        for user in users:
            try:
                await bot.send_message(user.tg_id, text=text, entities=entity, disable_web_page_preview=True)
                count += 1
                if orm.check_blocked(user.tg_id) == -1:
                    orm.delete_from_blocked(user.tg_id)
                if count == 10:
                    time.sleep(5)
                    count = 0
            except Exception as error:
                count_of_banned += 1
                orm.add_blocked_users(user.tg_id, user.username)
        answer2 = f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_of_users}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {count_of_users-count_of_banned}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {count_of_banned}'
        await message.answer(answer2, parse_mode='Markdown')
        await state.finish()
    else:
        answer1 = '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞'
        await message.answer(answer2, parse_mode='Markdown')
        await state.finish()

@dp.callback_query_handler(lambda call: 'create_mailing' in call.data)
async def start_mailing(callback_query: types.CallbackQuery):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å'
    await bot.send_message(callback_query.from_user.id, text)
    await Mailing.waiting_text.set()

@dp.message_handler(state=Mailing.waiting_text)
async def get_mailing_text(message: types.Message, state: FSMContext):
    await state.update_data(waiting_text=message.text, entity=message.entities)
    state_data = await state.get_data()
    text = state_data.get('waiting_text')
    entity = state_data.get('entity')
    users = orm.get_all_users()
    answer = '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É'
    await message.answer(answer, parse_mode='Markdown')
    count = 0
    count_of_users = len(users)
    count_of_banned = 0
    for user in users:
        try:
            await bot.send_message(user.tg_id, text=text, entities=entity, disable_web_page_preview=True)
            count += 1
            if orm.check_blocked(user.tg_id) == -1:
                    orm.delete_from_blocked(user.tg_id)
            if count == 10:
                    time.sleep(5)
                    count = 0
        except Exception as error:
            orm.add_blocked_users(user.tg_id, user.username)
            count_of_banned += 1
    answer1 = f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_of_users}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {count_of_users-count_of_banned}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {count_of_banned}'
    await message.answer(answer1, parse_mode='Markdown')
    await state.finish()

'''–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞'''

@dp.message_handler(state=Support.message)
async def send_support_message(message: types.Message, state: FSMContext):
    await state.update_data(message=message.text)
    state_data = await state.get_data()
    text = state_data.get('message')
    answer = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏'
    await bot.forward_message(chat_id=-830939578, from_chat_id=message.chat.id, message_id=message.message_id)
    await message.answer(answer)
    await state.finish()

@client.on(events.NewMessage(chats=(-830939578)))
async def create_support_msg(event):
    msg = event.message.to_dict()
    text = msg['message']
    msg_id = msg['reply_to']['reply_to_msg_id']
    result = await client(GetMessagesRequest(id=[msg_id]))
    user = result.messages[0].fwd_from.from_id.user_id
    await bot.send_message(user, text)

'''–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'''

@dp.message_handler(state=ChatPrivateLink.waiting_link)
async def get_private_report(message: types.Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    if '@' not in message.text and 't.me' not in message.text:
        text = '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        inline_markup = await premium_menu()
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
        await state.finish()
    state_data = await state.get_data()
    link = state_data.get('waiting_link')
    if 'joinchat' in link:
        hash = link[link.index('chat')+5:]
    elif '+' in link:
        hash = link[link.index('+')+1:]
    else:
        hash = link
    try:
        await client(ImportChatInviteRequest(hash))
        channel = await client.get_entity(link)
        queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
        LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
        ALL_PARTICIPANTS = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        await message.answer(text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±')
        for key in queryKey:
            if queryKey.index(key) == 12:
                await message.answer(text='50% –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            print(f'{queryKey.index(key)+1}/{len(queryKey)}')
            OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
            while True:
                participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                if not participants.users:
                    break
                ALL_PARTICIPANTS.extend(participants.users)
                OFFSET_USER += len(participants.users)
            target = '*.txt'
            file = glob.glob(target)[0]
            with open(file, "w", encoding="utf-8") as write_file:
                for participant in tqdm(ALL_PARTICIPANTS):
                    try:
                        if participant.username != None and participant.bot == False and participant.fake == False:
                            write_file.writelines(f"@{participant.username}\n")
                    except Exception as error:  
                        logging.error(error, exc_info=True)
        target = '*.txt'
        file = glob.glob(target)[0]
        os.rename(file, f'{channel.title}.txt')
        file = glob.glob(target)[0]
        uniqlines = set(open(file,'r', encoding='utf-8').readlines())
        open(file,'w', encoding='utf-8').writelines(set(uniqlines))
        with open(file, "r+", encoding="utf-8") as write_file:
            lines = write_file.readlines()
            top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
            lines[0] = top_text
            write_file.seek(0)
            write_file.writelines(lines)
        await state.finish()
        text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
        inline_markup = await premium_menu()
        await message.reply_document(open(file, 'rb'))
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    except Exception as error:
        if 'The authenticated user is already a participant' in error.args[0]:
            channel = await client.get_entity(link)
            queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
            LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
            ALL_PARTICIPANTS = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
            for key in queryKey:
                if queryKey.index(key) == 12:
                    await message.answer(text='50% –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                print(f'{queryKey.index(key)+1}/{len(queryKey)}')
                OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
                while True:
                    participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                    if not participants.users:
                        break
                    ALL_PARTICIPANTS.extend(participants.users)
                    OFFSET_USER += len(participants.users)
                target = '*.txt'
                file = glob.glob(target)[0]
                with open(file, "w", encoding="utf-8") as write_file:
                    for participant in tqdm(ALL_PARTICIPANTS):
                        try:
                            if participant.username != None and participant.bot == False and participant.fake == False:
                                write_file.writelines(f"@{participant.username}\n")
                        except Exception as error:  
                            logging.error(error, exc_info=True)
            target = '*.txt'
            file = glob.glob(target)[0]
            os.rename(file, f'{channel.title}.txt')
            file = glob.glob(target)[0]
            uniqlines = set(open(file,'r', encoding='utf-8').readlines())
            open(file,'w', encoding='utf-8').writelines(set(uniqlines))
            await state.finish()
            text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
            inline_markup = await premium_menu()
            await message.reply_document(open(file, 'rb'))
            await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
        if 'The chat the user tried to join has expired and is not valid anymore' in error.args[0]:
            text = '–≠—Ç–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞, —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"'
            inline_markup = await premium_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        if 'The API access for bot users is restricted.' in error.args[0]:
            text = '–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"'
            inline_markup = await premium_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        logging.error(error, exc_info=True)
        if 'Cannot find any entity corresponding' in error.args[0] or 'Nobody is using this username' in error.args[0]:
            text = '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"'
            inline_markup = await premium_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        if 'No user has' in error.args[0]:
            text = '–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"'
            inline_markup = await premium_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        if 'Cannot cast InputPeerUser' in error.args[0]:
            text = '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"'
            inline_markup = await premium_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        await state.finish()

@dp.message_handler(state=ListParsing.waiting_links)
async def get_list_report(message: types.Message, state: FSMContext):
    await state.update_data(waiting_links=message.text)
    state_data = await state.get_data()
    list_of_links = state_data.get('waiting_links').split('\n')
    inline_markup = await premium_menu()
    for link in list_of_links:
        if '@' not in message.text and 't.me' not in message.text:
            text = f'{link}\n–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, —Å—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –≤ —Å–µ–±–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å @ –∏–ª–∏ t.me'
            inline_markup = await premium_menu()
            await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
            await state.finish()
    text = '–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤ –∏ —á–∏—Å–ª–∞ –∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)'
    await message.answer(text, parse_mode='Markdown')
    ALL_PARTICIPANTS = []
    for link in list_of_links:
        if 'joinchat' not in link and '+' not in link:
            try:
                channel = await client.get_entity(link)
                queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                        'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
                LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
                for key in queryKey:
                    print(f'{queryKey.index(key)+1}/{len(queryKey)}')
                    OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
                    while True:
                        participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                        if not participants.users:
                            break
                        ALL_PARTICIPANTS.extend(participants.users)
                        OFFSET_USER += len(participants.users)
            except Exception as error:
                pass
        if 'joinchat' in link or '+' in link:
            if 'joinchat' in link:
                hash = link[link.index('chat')+5:]
            else:
                hash = link[link.index('+')+1:]
            try:
                await client(ImportChatInviteRequest(hash))
                channel = await client.get_entity(link)
                queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                        'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
                LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
                for key in queryKey:
                    print(f'{queryKey.index(key)+1}/{len(queryKey)}')
                    OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
                    while True:
                        participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                        if not participants.users:
                            break
                        ALL_PARTICIPANTS.extend(participants.users)
                        OFFSET_USER += len(participants.users)
                        print(len(ALL_PARTICIPANTS))
            except Exception as error:
                if 'The authenticated user is already a participant' in error.args[0]:
                    channel = await client.get_entity(link)
                    queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                        'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
                    LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
                    for key in queryKey:
                        print(f'{queryKey.index(key)+1}/{len(queryKey)}')
                        OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
                        while True:
                            participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                            if not participants.users:
                                break
                            ALL_PARTICIPANTS.extend(participants.users)
                            OFFSET_USER += len(participants.users)
    target = '*.txt'
    file = glob.glob(target)[0]
    with open(file, "w", encoding="utf-8") as write_file:
        for participant in tqdm(ALL_PARTICIPANTS):
            if participant.username != None and participant.bot == False and participant.fake == False:
                write_file.writelines(f"@{participant.username}\n")
    os.rename(file, 'report.txt')
    file = glob.glob(target)[0]
    uniqlines = set(open(file,'r', encoding='utf-8').readlines())
    open(file,'w', encoding='utf-8').writelines(set(uniqlines))
    with open(file, "r+", encoding="utf-8") as write_file:
        lines = write_file.readlines()
        top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
        lines[0] = top_text
        write_file.seek(0)
        write_file.writelines(lines)
    await state.finish()
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    inline_markup = await premium_menu()
    await message.reply_document(open(file, 'rb'))
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')

@dp.message_handler(state=ChatComments.waiting_link)
async def get_discussion_users(message: types.Message, state: FSMContext):
    try:
        await state.update_data(waiting_link=message.text)
        if '@' not in message.text and 't.me' not in message.text:
            text = '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç *t.m–µ/durov* –∏–ª–∏ *@dur–æv*'
            inline_markup = await premium_menu()
            await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
            await state.finish()
            return
        await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–µ –±–æ–ª–µ–µ 100)')
        await ChatComments.count_posts.set()
    except Exception as error:
        text = '–°—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
        inline_markup = await main_menu()
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
        await state.finish()

@dp.message_handler(state=ChatComments.count_posts)
async def get_comments_users(message: types.Message, state: FSMContext):
    try:
        await state.update_data(count_posts=message.text)
        state_data = await state.get_data()
        state_data = await state.get_data()
        link = state_data.get('waiting_link')
        count = int(state_data.get('count_posts'))
        if 'joinchat' in link:
            hash = link[link.index('chat')+5:]
        elif '+' in link:
            hash = link[link.index('+')+1:]
        else:
            hash = link
        try:
            await client(ImportChatInviteRequest(hash))
            channel = await client.get_entity(link)
            ALL_USERS = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
            await message.answer(text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±')
            posts = await client(GetHistoryRequest(peer=channel,limit=count,offset_date=None,offset_id=0,max_id=0,min_id=0,add_offset=0,hash=0))
            for post in posts.messages:
                try:
                    async for msg in client.iter_messages(channel.id, reply_to=post.id):
                        ALL_USERS.append(msg.sender)
                except Exception as error:
                    pass
            target = '*.txt'
            file = glob.glob(target)[0]
            with open(file, "w", encoding="utf-8") as write_file:
                for user in tqdm(ALL_USERS):
                    try:
                        if user.username != None and user.bot == False and user.fake == False:
                            write_file.writelines(f"@{user.username}\n")
                    except Exception as error:  
                        pass
            target = '*.txt'
            file = glob.glob(target)[0]
            os.rename(file, f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ {channel.title}.txt')
            file = glob.glob(target)[0]
            uniqlines = set(open(file,'r', encoding='utf-8').readlines())
            open(file,'w', encoding='utf-8').writelines(set(uniqlines))
            with open(file, "r+", encoding="utf-8") as write_file:
                lines = write_file.readlines()
                top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
                lines[0] = top_text
                write_file.seek(0)
                write_file.writelines(lines)
            await state.finish()
            text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
            inline_markup = await premium_menu()
            await message.reply_document(open(file, 'rb'))
            await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
        except Exception as error:
            if 'The authenticated user is already a participant' in error.args[0]:
                channel = await client.get_entity(link)
                ALL_USERS = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
                await message.answer(text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±')
                posts = await client(GetHistoryRequest(peer=channel,limit=count,offset_date=None,offset_id=0,max_id=0,min_id=0,add_offset=0,hash=0))
                for post in posts.messages:
                    try:
                        async for msg in client.iter_messages(channel.id, reply_to=post.id):
                            ALL_USERS.append(msg.sender)
                    except Exception as error:
                        pass
                target = '*.txt'
                file = glob.glob(target)[0]
                top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n\# –ì—Ä—É–ø–ø—ã: {channel.title}o\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n-------------------------------------'
                with open(file, "w", encoding="utf-8") as write_file:
                    write_file.writelines(top_text)
                    for user in tqdm(ALL_USERS):
                        try:
                            if user.username != None and user.bot == False and user.fake == False:
                                write_file.writelines(f"@{user.username}\n")
                        except Exception as error:  
                            pass
                target = '*.txt'
                file = glob.glob(target)[0]
                os.rename(file, f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ {channel.title}.txt')
                file = glob.glob(target)[0]
                uniqlines = set(open(file,'r', encoding='utf-8').readlines())
                open(file,'w', encoding='utf-8').writelines(set(uniqlines))
                with open(file, "r+", encoding="utf-8") as write_file:
                    lines = write_file.readlines()
                    top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
                    lines[0] = top_text
                    write_file.seek(0)
                    write_file.writelines(lines)
                await state.finish()
                text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
                inline_markup = await premium_menu()
                await message.reply_document(open(file, 'rb'))
                await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
            if 'The chat the user tried to join has expired and is not valid anymore' in error.args[0]:
                try:
                    channel = await client.get_entity(link)
                    ALL_USERS = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
                    await message.answer(text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±')
                    posts = await client(GetHistoryRequest(peer=channel,limit=count,offset_date=None,offset_id=0,max_id=0,min_id=0,add_offset=0,hash=0))
                    for post in posts.messages:
                        try:
                            async for msg in client.iter_messages(channel.id, reply_to=post.id):
                                ALL_USERS.append(msg.sender)
                        except Exception as error:
                            pass
                    target = '*.txt'
                    file = glob.glob(target)[0]
                    with open(file, "w", encoding="utf-8") as write_file:
                        for user in tqdm(ALL_USERS):
                            try:
                                if user.username != None and user.bot == False and user.fake == False:
                                    write_file.writelines(f"@{user.username}\n")
                            except Exception as error:  
                                pass
                    target = '*.txt'
                    file = glob.glob(target)[0]
                    os.rename(file, f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ {channel.title}.txt')
                    file = glob.glob(target)[0]
                    uniqlines = set(open(file,'r', encoding='utf-8').readlines())
                    open(file,'w', encoding='utf-8').writelines(set(uniqlines))
                    with open(file, "r+", encoding="utf-8") as write_file:
                        lines = write_file.readlines()
                        top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
                        lines[0] = top_text
                        write_file.seek(0)
                        write_file.writelines(lines)
                    await state.finish()
                    text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
                    inline_markup = await premium_menu()
                    await message.reply_document(open(file, 'rb'))
                    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
                except Exception as error:
                    text = '–°—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
                    inline_markup = await main_menu()
                    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
                    await state.finish()
    except Exception as error:
        text = '–°—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
        inline_markup = await main_menu()
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
        await state.finish()

@dp.callback_query_handler(state=ParsingActivity.last_activity)
async def parsing_activity_start(callback_query: types.CallbackQuery, state: FSMContext):
    if orm.check_premium(callback_query.from_user.id) == -1:
        text = '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        inline_markup = await premium_parsing_menu()
        await bot.send_message(callback_query.from_user.id, text, reply_markup=inline_markup, parse_mode='Markdown')
        await state.finish()
    else: 
        await state.update_data(last_activity=callback_query.data)
        state_data = await state.get_data()
        link = state_data.get('waiting_link')
        online = state_data.get('last_activity').split('_')[1]
        hours = int(online)
        await bot.send_message(callback_query.from_user.id, text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±', parse_mode='Markdown')
    if 'joinchat' not in link and '+' not in link:
            ALL_PARTICIPANTS = []
            channel = await client.get_entity(link)
            queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                        'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
            LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
            for key in queryKey:
                if queryKey.index(key) == 12:
                    await bot.send_message(callback_query.from_user.id, text='50% –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                print(f'{queryKey.index(key)+1}/{len(queryKey)}')
                OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
                while True:
                    participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                    if not participants.users:
                        break
                    ALL_PARTICIPANTS.extend(participants.users)
                    OFFSET_USER += len(participants.users)
            ALL_PARTICIPANTS = await sort_by_activity(ALL_PARTICIPANTS, hours)
            target = '*.txt'
            file = glob.glob(target)[0]
            with open(file, "w", encoding="utf-8") as write_file:
                for participant in tqdm(ALL_PARTICIPANTS):
                        if participant.username != None and participant.bot == False and participant.fake == False:
                            write_file.writelines(f"@{participant.username}\n")
            target = '*.txt'
            file = glob.glob(target)[0]
            os.rename(file, f'{channel.title}.txt')
            file = glob.glob(target)[0]
            uniqlines = set(open(file,'r', encoding='utf-8').readlines())
            open(file,'w', encoding='utf-8').writelines(set(uniqlines))
            with open(file, "r+", encoding="utf-8") as write_file:
                lines = write_file.readlines()
                top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
                lines[0] = top_text
                write_file.seek(0)
                write_file.writelines(lines)
            await state.finish()
            text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
            inline_markup = await premium_menu()
            await bot.send_document(callback_query.from_user.id, open(file, 'rb'))
            await bot.send_message(callback_query.from_user.id, text, reply_markup=inline_markup)
    if 'joinchat' in link or '+' in link:
            if 'joinchat' in link:
                hash = link[link.index('chat')+5:]
            else:
                hash = link[link.index('+')+1:]
            try:
                ALL_PARTICIPANTS = []
                await client(ImportChatInviteRequest(hash))
                channel = await client.get_entity(link)
                queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                        'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
                LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
                for key in queryKey:
                    if queryKey.index(key) == 12:
                        await bot.send_message(callback_query.from_user.id, text='50% –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                    print(f'{queryKey.index(key)+1}/{len(queryKey)}')
                    OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
                    while True:
                        participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                        if not participants.users:
                            break
                        ALL_PARTICIPANTS.extend(participants.users)
                        OFFSET_USER += len(participants.users)
                ALL_PARTICIPANTS = await sort_by_activity(ALL_PARTICIPANTS, hours)
                target = '*.txt'
                file = glob.glob(target)[0]
                with open(file, "w", encoding="utf-8") as write_file:
                    for participant in tqdm(ALL_PARTICIPANTS):
                            if participant.username != None and participant.bot == False and participant.fake == False:
                                write_file.writelines(f"@{participant.username}\n")
                target = '*.txt'
                file = glob.glob(target)[0]
                os.rename(file, f'{channel.title}.txt')
                file = glob.glob(target)[0]
                uniqlines = set(open(file,'r', encoding='utf-8').readlines())
                open(file,'w', encoding='utf-8').writelines(set(uniqlines))
                with open(file, "r+", encoding="utf-8") as write_file:
                    lines = write_file.readlines()
                    top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
                    lines[0] = top_text
                    write_file.seek(0)
                    write_file.writelines(lines)
                await state.finish()
                text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
                inline_markup = await premium_menu()
                await bot.send_document(callback_query.from_user.id, open(file, 'rb'))
                await bot.send_message(callback_query.from_user.id, text, reply_markup=inline_markup)
            except Exception as error:
                if 'The authenticated user is already a participant' in error.args[0]:
                    ALL_PARTICIPANTS = []
                    channel = await client.get_entity(link)
                    queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                        'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
                    LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
                    for key in queryKey:
                        if queryKey.index(key) == 12:
                            await bot.send_message(callback_query.from_user.id, text='50% –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                        print(f'{queryKey.index(key)+1}/{len(queryKey)}')
                        OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
                        while True:
                            participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                            if not participants.users:
                                break
                            ALL_PARTICIPANTS.extend(participants.users)
                            OFFSET_USER += len(participants.users)
                    ALL_PARTICIPANTS = await sort_by_activity(ALL_PARTICIPANTS, hours)
                    target = '*.txt'
                    file = glob.glob(target)[0]
                    with open(file, "w", encoding="utf-8") as write_file:
                        for participant in tqdm(ALL_PARTICIPANTS):
                                if participant.username != None and participant.bot == False and participant.fake == False:
                                    write_file.writelines(f"@{participant.username}\n")
                    target = '*.txt'
                    file = glob.glob(target)[0]
                    os.rename(file, f'{channel.title}.txt')
                    file = glob.glob(target)[0]
                    uniqlines = set(open(file,'r', encoding='utf-8').readlines())
                    open(file,'w', encoding='utf-8').writelines(set(uniqlines))
                    with open(file, "r+", encoding="utf-8") as write_file:
                        lines = write_file.readlines()
                        top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
                        lines[0] = top_text
                        write_file.seek(0)
                        write_file.writelines(lines)
                    await state.finish()
                    text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
                    inline_markup = await premium_menu()
                    await bot.send_document(callback_query.from_user.id, open(file, 'rb'))
                    await bot.send_message(callback_query.from_user.id, text, reply_markup=inline_markup)
    
'''–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'''

@dp.message_handler(state=ChatOpenLink.waiting_link)
async def get_open_report(message: types.Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    if '@' not in message.text and 't.me' not in message.text:
        text = '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç *t.m–µ/durov* –∏–ª–∏ *@dur–æv*'
        inline_markup = await main_menu()
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
        await state.finish()
    state_data = await state.get_data()
    link = state_data.get('waiting_link')
    try:
        channel = await client.get_entity(link)
        queryKey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
                'u', 'v', 'w', 'x', 'y', 'z'] # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
        LIMIT_USER = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –±–æ–ª–µ–µ 200
        ALL_PARTICIPANTS = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        await message.answer(text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±')
        for key in queryKey:
            if queryKey.index(key) == 13:
                await message.answer(text='50% –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            print(f'{queryKey.index(key)+1}/{len(queryKey)}')
            OFFSET_USER = 0 # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
            while True:
                participants = await client(GetParticipantsRequest(channel,ChannelParticipantsSearch(key), OFFSET_USER, LIMIT_USER, hash=0))
                if not participants.users:
                    break
                ALL_PARTICIPANTS.extend(participants.users)
                OFFSET_USER += len(participants.users)
            target = '*.txt'
            file = glob.glob(target)[0] 
            with open(file, "w", encoding="utf-8") as write_file:
                for participant in tqdm(ALL_PARTICIPANTS):
                    try:
                        if participant.username != None and participant.bot == False and participant.fake == False:
                            write_file.writelines(f"@{participant.username}\n")
                    except Exception as error:  
                        logging.error(error, exc_info=True)
        target = '*.txt'
        file = glob.glob(target)[0]
        os.rename(file, f'{channel.title}.txt')
        file = glob.glob(target)[0]
        uniqlines = set(open(file,'r', encoding='utf-8').readlines())
        open(file,'w', encoding='utf-8').writelines(set(uniqlines))
        with open(file, "r+", encoding="utf-8") as write_file:
            lines = write_file.readlines()
            top_text = f'-------------------------------------\n# –°–±–æ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {dp.bot._me.mention}\n# –ì—Ä—É–ø–ø—ã: {channel.title}\n# –°–æ–±—Ä–∞–Ω–æ: {datetime.now()}\n# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)+5}\n-------------------------------------\n'
            lines[0] = top_text
            write_file.seek(0)
            write_file.writelines(lines)
        await state.finish()
        text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
        inline_markup = await main_menu()
        await message.reply_document(open(file, 'rb'))
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    except Exception as error:
        if 'Invalid channel object' in error.args[0]:
            text = '–ü–∞—Å—Ä–∏–Ω–≥ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
            inline_markup = await main_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        logging.error(error, exc_info=True)
        if 'Cannot find any entity corresponding' in error.args[0] or 'Nobody is using this username' in error.args[0]:
            text = '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"'
            inline_markup = await main_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        if 'No user has' in error.args[0]:
            text = '–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"'
            inline_markup = await main_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        if 'Cannot cast InputPeerUser' in error.args[0]:
            text = '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"'
            inline_markup = await main_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        if 'Cannot get entity from a channel (or group)' in error.args[0]:
            text = '–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–æ–≤ —Ç–∞–∫–æ–≥–æ —Ä–æ–¥–∞'
            inline_markup = await main_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        if 'Chat admin privileges are required to do that in the specified chat' in error.args[0]:
            text = '–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–æ–≤ —Ç–∞–∫–æ–≥–æ —Ä–æ–¥–∞'
            inline_markup = await main_menu()
            await message.answer(text, reply_markup=inline_markup)
            await state.finish()
        await state.finish()
   
'''–®–∞–±–ª–æ–Ω—ã –≤—Å–µ—Ö –º–µ–Ω—é'''
    
async def main_menu():
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton(
            text='üîç–°–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç', 
            callback_data='parsing_open_start'
        ))
    inline_markup.add(types.InlineKeyboardButton(
            text='üîíPremium —Ñ—É–Ω–∫—Ü–∏–∏', 
            callback_data='premium_menu'
        ))
    inline_markup.add(types.InlineKeyboardButton(
            text='üîß–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 
            callback_data='support'
        ))
    return inline_markup

async def premium_menu():
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton(
        text='–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ/–ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞', 
        callback_data='parsing_private_start'
    ))
    inline_markup.add(types.InlineKeyboardButton(
            text='–°–ø–∞—Ä—Å–∏—Ç—å —á–∞—Ç—ã —Å–ø–∏—Å–∫–æ–º', 
            callback_data='parsing_list_start'
    ))
    inline_markup.add(types.InlineKeyboardButton(
            text='üîô–ù–∞–∑–∞–¥', 
            callback_data='main_menu'
        ))
    return inline_markup

async def admin_menu():
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton(
            text='–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 
            callback_data='create_mailing'
        ))
    inline_markup.add(types.InlineKeyboardButton(
            text='–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É', 
            callback_data='create_admin_mailing'
        ))
    inline_markup.add(types.InlineKeyboardButton(
            text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 
            callback_data='stat'
        ))
    return inline_markup

async def premium_parsing_menu():
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton(
            text='–°–æ–±—Ä–∞—Ç—å –≤—Å–µ—Ö', 
            callback_data='private_all'
    ))
    inline_markup.add(types.InlineKeyboardButton(
            text='–ü–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è', 
            callback_data='parsing_activity'
    ))
    inline_markup.add(types.InlineKeyboardButton(
        text='–ò–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º', 
        callback_data='parsing_comments'
    ))
    inline_markup.add(types.InlineKeyboardButton(
        text='–û—Ç–º–µ–Ω–∞', 
        callback_data='premium_menu'
    ))
    return inline_markup

async def activity_menu():
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton(
            text='–ó–∞ 1 —á–∞—Å', 
            callback_data='online_1'
        ))
    inline_markup.add(types.InlineKeyboardButton(
            text='–ó–∞ 6 —á–∞—Å–æ–≤', 
            callback_data='online_6'
        ))
    inline_markup.add(types.InlineKeyboardButton(
            text='–ó–∞ —Å—É—Ç–∫–∏', 
            callback_data='online_24'
        ))
    inline_markup.add(types.InlineKeyboardButton(
            text='–ó–∞ 3 –¥–Ω—è', 
            callback_data='online_72'
        ))
    inline_markup.add(types.InlineKeyboardButton(
            text='–ó–∞ 7 –¥–Ω–µ–π', 
            callback_data='online_168'
        ))
    inline_markup.add(types.InlineKeyboardButton(
        text='–û—Ç–º–µ–Ω–∞', 
        callback_data='parsing_private_start'
    ))
    return inline_markup

'''–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'''

async def sort_by_activity(all_particapants, hours):
    current_time_utc =  datetime.now(timezone.utc)
    target_time = current_time_utc - timedelta(hours=hours, minutes=0)
    list_id = []
    for user in all_particapants:
        list_id.append(user.id)
    finish_list = await client(GetUsersRequest(list_id))
    for participant in finish_list:
        try:
            if participant.status.was_online > target_time:
                continue
            if participant.status.was_online < target_time:
                finish_list.remove(participant)
        except Exception as error:
            finish_list.remove(participant)
    return finish_list


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    with client:
        client.loop.run_until_complete()